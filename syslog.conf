filter {	
	if [type] == "syslog" {
		grok {
			match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:pam_message} %{USER:pam_username} from %{SYSLOGHOST:syslog_hostname}" }
		}
		grok {
			match => { "message" => "Invalid user %{USER:username} from %{IP:src_ip}" }
			add_tag => [ "ssh_invalid_user" ]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		grok {
			match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: Accepted keyboard-interactive/pam for %{USER:username} from %{IP:src_ip} port %{INT:src_port} ssh2" }
			add_tag => [ "ssh_plus_google_auth_success" ]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		grok {
			match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: Failed password for %{USER:username} from %{IP:src_ip} port %{INT:src_port} ssh2" }
			add_tag => [ "ssh_failed_password" ]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		grok {
			match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:host_single} %{SYSLOGPROG}: Accepted %{WORD:auth_method} for %{USER:username} from %{IP:src_ip} port %{INT:src_port} ssh2" }
			add_tag => [ "ssh_auth_success" ]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		grok {
			match => { "message" => "%{SYSLOGPROG}: %{WORD:pam_type}\(%{DATA:pam_message}\): access denied for user `%{USER:pam_username}' from `%{SYSLOGHOST:syslog_hostname}'" }
			add_tag => [ "ssh_google_auth_failed" ]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		grok {
			match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:host_single} %{SYSLOGPROG}\(%{DATA:pam_message}\)(?:\[%{POSINT:syslog_pid}\])?: Did not receive verification code from user" }
			add_tag => [ "ssh_google_auth_failed", "ssh_google_auth_no_verification_code" ]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		grok {
			match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:host_single} %{SYSLOGPROG}\(%{DATA:pam_message}\)(?:\[%{POSINT:syslog_pid}\])?: Secret file %{QUOTEDSTRING:google_auth_secret_file_path} changed while trying to use scratch code" }
			add_tag => [ "ssh_google_auth_failed", "ssh_google_auth_scratch_code_error" ]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		grok {
			match => { "message" => "Accepted %{DATA:pam_message} for %{USER:username} from %{IP:src_ip} port %{INT:src_port} ssh2" }
			add_tag => [ "ssh_auth_success" ]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		grok {
			match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:host_single} %{SYSLOGPROG}: %{GREEDYDATA:ssh_session_closed_message} by %{IP:src_ip}" }
			add_tag => [ "ssh_logout" ]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		grok {
			match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:host_single} %{SYSLOGPROG}: %{WORD:pam_type}\(%{DATA:pam_message}\): authentication failure; logname=%{DATA:logname} uid=%{BASE10NUM:uid} euid=%{BASE10NUM:euid} tty=%{DATA:tty} ruser=%{DATA:ruser} rhost=%{SYSLOGHOST:syslog_hostname} {1,2}user=%{USER:pam_username}" }
			add_tag => [ "ssh_auth_failed" ]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		grok {
			match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:host_single} %{SYSLOGPROG}: error: PAM: Authentication failure for %{USER:pam_username} from %{SYSLOGHOST:syslog_hostname}" }
			add_tag => [ "ssh_auth_failed" ]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}		
		grok {
		  	match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:host_single} %{SYSLOGPROG}: %{WORD:pam_type}\(%{DATA:pam_message}\): session opened for user %{USER:pam_username} by \(uid=%{INT:pam_UID}\)" }
			add_tag => [ "ssh_session_opened" ]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		grok {
		  	match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: Accepted publickey for %{USER:username} from %{IP:src_ip} port %{INT:src_port} ssh2" }
			add_tag => [ "ssh_accepted_publickey" ]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		grok {
			match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{WORD:pam_type}\(%{DATA:pam_message}\): session closed for user %{USER:pam_username}" }
			add_tag => [ "ssh_logout"]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		grok {
		  match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: Received disconnect from %{IP:src_ip}: %{INT:pam_random}: disconnected by user" }
			add_tag => [ "ssh_disconnect" ]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		grok {
		  	match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: new group: name=%{USER:pam_username}, GID=%{INT:pam_GID}" }
			add_tag => [ "linux_new_group" ]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		grok {
		  	match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:host_single} %{SYSLOGPROG}: new user: name=%{USER:pam_username}, UID=%{INT:pam_UID}, GID=%{INT:pam_GID}, home=%{DATA:pam_home_path}, shell=%{DATA:pam_shell}" }
			add_tag => [ "linux_new_user"]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		grok {
		  	match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:host_single} %{SYSLOGPROG}: %{WORD:pam_type}\(%{DATA:pam_message}\): password changed for %{USER:pam_username}" }
			add_tag => [ "linux_password_changed" ]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		grok {
		  match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:host_single} %{SYSLOGPROG}: delete user '%{USER:pam_username}'" }
			add_tag => [ "linux_delete_user" ]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		grok {
		  	match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{WORD:sudo_word}: %{WORD:pam_type}\(%{DATA:pam_message}\): %{GREEDYDATA:sudo_message}; logname=%{DATA:logname} uid=%{BASE10NUM:uid} euid=%{BASE10NUM:euid} tty=%{DATA:tty} ruser=%{DATA:ruser} rhost=%{SYSLOGHOST:syslog_hostname} {1,2}user=%{USER:pam_username}" }
			add_tag => [ "linux_sudo_attempt"]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		grok {
		  	match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:host_single} %{SYSLOGPROG}: removed group '%{DATA:pam_group}' owned by '%{USER:pam_username}'" }
			add_tag => [ "linux_removed_group" ]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		grok {
		  match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}: %{USER:priv_username}{1,2} : %{GREEDYDATA:priv_message}" }
			add_tag => [ "linux_privilege_attempt" ]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		
		#temporarily removed on 11.5.15 because errors about nil host in logstash.err
		#dns { resolve => ["host"] action => "replace" }
		#mutate { add_tag => ["dns_resolve"] }
		
		geoip {
			source => "src_ip"
			target => "geoip"
			add_field => ["[geoip][coordinates]","%{[geoip][longitude]}"]
			add_field => ["[geoip][coordinates]","%{[geoip][latitude]}"]
		}
		mutate {
			convert => [ "[geoip][coordinates]", "float" ]
		}
		geoip {
			source => "host"
			target => "geoip"
			add_field => ["[geoip][coordinates]","%{[geoip][longitude]}"]
			add_field => ["[geoip][coordinates]","%{[geoip][latitude]}"]
		}
		mutate {
			convert => [ "[geoip][coordinates]", "float" ]
		}
	}
}
